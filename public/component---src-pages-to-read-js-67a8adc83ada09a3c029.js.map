{"version":3,"sources":["webpack://jotter/./src/pages/to-read.js"],"names":["ToRead","isAuthenticated","useAuth0","useFetchMongoBooks","from","getToRead","toReadBooks","data","hasFetched","error","loading","useState","search","setSearch","header","subheader","searchBook","e","preventDefault","handleSearch","target","value","placeholder","message","filter","book","bookTitle","toUpperCase","includes","map","key","cover","to","isbn","title","author","join","date","year","minHeight","src","LoadingIcon","alt","className","length"],"mappings":"2QAae,SAASA,IACtB,IAAQC,GAAoBC,UAApBD,gBACR,GAKIE,OAAmB,CAAEF,gBAAgBA,EAAiBG,KAAMC,OAJxDC,EADR,EACEC,KACAC,EAFF,EAEEA,WACAC,EAHF,EAGEA,MACAC,EAJF,EAIEA,QAGF,GAA4BC,cAAS,IAA9BC,EAAP,KAAeC,EAAf,KASA,OACE,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAQC,OAAO,UAAUC,UAAU,oCACjC,gBAAC,IAAD,CACEC,WARW,SAACC,GAClBA,EAAEC,kBAQIC,aAba,SAACF,GACpBJ,EAAUI,EAAEG,OAAOC,QAabC,YAAY,mBAGfb,GACC,gBAAC,IAAD,CAAcc,QAAQ,sGAEvBf,GACC,gBAAC,KAAD,KACGF,EACEkB,QAAO,SAACC,GACP,MAAe,KAAXb,GAGFa,EAAKC,UAAUC,cAAcC,SAAShB,EAAOe,eAFtCF,EAMA,QAGVI,KAAI,SAACJ,GACJ,OACE,gBAAC,KAAD,CACEK,IAAKL,EAAKC,UAAYD,EAAKM,MAC3BC,GAAE,oBAAsBP,EAAKQ,KAC7BA,KAAMR,EAAKQ,KACXF,MAAON,EAAKM,MACZG,MAAOT,EAAKC,UACZS,OAAQV,EAAKU,OAAOC,KAAK,MACzBC,KAAMZ,EAAKa,WAMtB5B,GACC,gBAAC,IAAD,CAAS6B,UAAU,QACjB,gBAAC,IAAD,CACEA,UAAU,OACVC,IAAKC,IACLC,IAAI,eACJC,UAAU,cAIfnC,GAAqC,IAAvBF,EAAYsC,QACzB,gBAAC,IAAD","file":"component---src-pages-to-read-js-67a8adc83ada09a3c029.js","sourcesContent":["import React, { useState } from \"react\";\nimport Layout from \"../components/Page/Layout\";\nimport LoadingIcon from \"../assets/loading.svg\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport { getToRead } from \"../services/realm/API\";\nimport { Wrapper, Loading } from \"../components/Notification & Error/Loading\";\nimport useFetchMongoBooks from \"../hooks/useFetchMongoBooks\";\nimport ErrorMessage from \"../components/Notification & Error/ErrorMessage\";\nimport BookItem, { BookList } from \"../components/Book/Book\";\nimport Header from \"../components/Page/Headings\";\nimport SearchBar from \"../components/Page/SearchBar\";\nimport { NoContentMessage } from \"../components/Notification & Error/NoContentMessage\";\n\nexport default function ToRead() {\n  const { isAuthenticated } = useAuth0();\n  const {\n    data: toReadBooks,\n    hasFetched,\n    error,\n    loading\n  } = useFetchMongoBooks({ isAuthenticated:isAuthenticated, from: getToRead });\n\n  const [search, setSearch] = useState(\"\");\n  const handleSearch = (e) => {\n    setSearch(e.target.value);\n  };\n\n  const searchBook = (e) => {\n    e.preventDefault();\n  };\n\n  return (\n    <Layout>\n      <Header header=\"To-read\" subheader=\"The books you want to read later\">\n        <SearchBar\n          searchBook={searchBook}\n          handleSearch={handleSearch}\n          placeholder=\"Search a book\"\n        />\n      </Header>\n      {error && (\n        <ErrorMessage message=\"Sorry, we ran into a problem while loading your to-read books. Try again by refreshing this page.\" />\n      )}\n      {hasFetched && (\n        <BookList>\n          {toReadBooks\n            .filter((book) => {\n              if (search === \"\") {\n                return book;\n              } else if (\n                book.bookTitle.toUpperCase().includes(search.toUpperCase())\n              ) {\n                return book;\n              } else {\n                return null;\n              }\n            })\n            .map((book) => {\n              return (\n                <BookItem\n                  key={book.bookTitle + book.cover}\n                  to={`/to-read-book?id=${book.isbn}`}\n                  isbn={book.isbn}\n                  cover={book.cover}\n                  title={book.bookTitle}\n                  author={book.author.join(\", \")}\n                  date={book.year}\n                />\n              );\n            })}          \n        </BookList>\n      )}\n      {loading && (\n        <Wrapper minHeight=\"40vh\">\n          <Loading\n            minHeight=\"50vh\"\n            src={LoadingIcon}\n            alt=\"Loading icon\"\n            className=\"rotating\"\n          />\n        </Wrapper>\n      )}\n      {hasFetched && toReadBooks.length === 0 && (\n        <NoContentMessage>\n          You don't have any books in your to-read yet.\n        </NoContentMessage>\n      )}\n    </Layout>\n  );\n}\n"],"sourceRoot":""}