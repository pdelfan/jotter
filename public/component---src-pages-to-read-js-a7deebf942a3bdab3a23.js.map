{"version":3,"sources":["webpack://jotter/./src/pages/to-read.js"],"names":["ToRead","useAuth0","user","isAuthenticated","loading","useState","libraryBooks","setLibraryBooks","isFetching","setIsFetching","useEffect","getToRead","nickname","then","response","catch","e","console","log","heading","subheading","map","book","key","bookTitle","cover","isbn","shouldHover","title","author","join","date","year","minHeight","src","LoadingIcon","alt","className","Router","path","component","Index"],"mappings":"yPAWe,SAASA,IACtB,OAA2CC,UAAnCC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,gBAAiBC,EAA/B,EAA+BA,QAC/B,GAAwCC,cAAS,IAA1CC,EAAP,KAAqBC,EAArB,KACA,GAAoCF,eAAS,GAAtCG,EAAP,KAAmBC,EAAnB,KAgBA,OAdAC,gBAAU,WACJR,IACFO,GAAc,IACdE,QAAUT,EAAKU,UACZC,MAAK,SAACC,GACLP,EAAgBO,GAChBL,GAAc,MAEfM,OAAM,SAACC,GACNC,QAAQC,IAAIF,SAGjB,CAACd,IAEAC,IAAoBC,EAEpB,gBAAC,IAAD,CAAQe,QAAQ,UAAUC,WAAW,oCAClCd,GACC,gBAAC,IAAD,KACGA,EAAae,KAAI,SAACC,GACjB,OACE,gBAAC,IAAD,CACEC,IAAKD,EAAKE,UAAYF,EAAKG,MAC3BC,KAAMJ,EAAKI,KACXC,aAAa,EACbF,MAAOH,EAAKG,MACZG,MAAON,EAAKE,UACZK,OAAQP,EAAKO,OAAOC,KAAK,MACzBC,KAAMT,EAAKU,WAMpBxB,GACC,gBAAC,IAAD,CAASyB,UAAU,QACjB,gBAAC,IAAD,CACEA,UAAU,OACVC,IAAKC,IACLC,IAAI,eACJC,UAAU,eAQlB,gBAAC,EAAAC,OAAD,KACE,gBAAC,KAAD,CAAcC,KAAK,QAAQC,UAAWC","file":"component---src-pages-to-read-js-a7deebf942a3bdab3a23.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Layout from \"../components/Layout\";\nimport LoadingIcon from \"../assets/loading.svg\";\nimport { useAuth0 } from \"../services/auth\";\nimport BookItem, { BookList } from \"../components/Book/LibraryBook\";\nimport { getToRead } from \"../services/realm/API\";\nimport { Router } from \"@reach/router\";\nimport Index from \"../pages/index\";\nimport PrivateRoute from \"../components/Routing\";\nimport { Wrapper, Loading } from \"../components/Loading\";\n\nexport default function ToRead() {\n  const { user, isAuthenticated, loading } = useAuth0();\n  const [libraryBooks, setLibraryBooks] = useState([]);\n  const [isFetching, setIsFetching] = useState(false);\n\n  useEffect(() => {\n    if (user) {\n      setIsFetching(true);\n      getToRead(user.nickname)\n        .then((response) => {\n          setLibraryBooks(response);\n          setIsFetching(false);\n        })\n        .catch((e) => {\n          console.log(e);\n        });\n    }\n  }, [user]);\n\n  if (isAuthenticated && !loading) {\n    return (\n      <Layout heading=\"To-read\" subheading=\"The books you want to read later\">\n        {libraryBooks && (\n          <BookList>\n            {libraryBooks.map((book) => {\n              return (\n                <BookItem\n                  key={book.bookTitle + book.cover}\n                  isbn={book.isbn}\n                  shouldHover={true}\n                  cover={book.cover}\n                  title={book.bookTitle}\n                  author={book.author.join(\", \")}\n                  date={book.year}\n                />\n              );\n            })}\n          </BookList>\n        )}\n        {isFetching && (\n          <Wrapper minHeight=\"50vh\">\n            <Loading\n              minHeight=\"60vh\"\n              src={LoadingIcon}\n              alt=\"Loading icon\"\n              className=\"rotating\"\n            />\n          </Wrapper>\n        )}\n      </Layout>\n    );\n  } else {\n    return (\n      <Router>\n        <PrivateRoute path=\"/book\" component={Index} />\n      </Router>\n    );\n  }\n}\n"],"sourceRoot":""}