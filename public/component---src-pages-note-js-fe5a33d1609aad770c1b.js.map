{"version":3,"sources":["webpack://jotter/./src/hooks/useFetchNote.js","webpack://jotter/./src/pages/note.js"],"names":["user","bookID","noteID","useState","hasFetchedNote","setHasFetchedNote","note","setNote","error","setError","useEffect","getNote","email","result","message","fetchNote","location","useAuth0","queryString","search","book","useFetchNote","Layout","TextEditor","username","initialContent","convertFromRaw","JSON","parse","content","noteTitle","existingNote","editMode"],"mappings":"iQA8BA,EA3BqB,SAACA,EAAMC,EAAQC,GAClC,OAA4CC,eAAS,GAA9CC,EAAP,KAAuBC,EAAvB,KACA,GAAwBF,cAAS,MAA1BG,EAAP,KAAaC,EAAb,KACA,GAA0BJ,cAAS,MAA5BK,EAAP,KAAcC,EAAd,KAqBA,OAnBAC,gBAAU,WAYK,OAATJ,GAXW,mCAAG,uFACXN,EADW,2EAGKW,QAAQX,EAAKY,MAAOX,EAAQC,GAHjC,OAGVW,EAHU,OAIdN,EAAQM,GACRR,GAAkB,GALJ,kDAOdI,EAAS,KAAMK,SAPD,0DAAH,oDAYbC,KAID,CAACf,EAAMM,EAAML,EAAQC,IAEjB,CAAEI,OAAMF,iBAAgBI,UCSjC,EA3Ba,SAAC,GAAkB,IAAhBQ,EAAe,EAAfA,SACNhB,GAASiB,UAATjB,KACFC,EAASiB,QAAkBF,EAASG,QAAQC,KAC5ClB,EAASgB,QAAkBF,EAASG,QAAQb,KAClD,EAAiCe,EAAarB,EAAMC,EAAQC,GAApDI,EAAR,EAAQA,KAAMF,EAAd,EAAcA,eAEd,OAAe,OAAXH,EACK,gBAAC,KAAD,MAGL,gBAACqB,EAAA,EAAD,KACGlB,GACC,gBAACmB,EAAA,EAAD,CACEC,SAAUxB,EAAKY,MACfX,OAAQA,EACRC,OAAQA,EACRuB,gBAAgBC,oBAAeC,KAAKC,MAAMtB,EAAKuB,UAC/CC,UAAWxB,EAAKwB,UAChBC,cAAc,EACdC,UAAU","file":"component---src-pages-note-js-fe5a33d1609aad770c1b.js","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { getNote } from \"../services/realm/API\";\n\nconst useFetchNote = (user, bookID, noteID) => {\n  const [hasFetchedNote, setHasFetchedNote] = useState(false);\n  const [note, setNote] = useState(null);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchNote = async () => {\n      if (!user) return;\n      try {\n        let result = await getNote(user.email, bookID, noteID);\n        setNote(result);\n        setHasFetchedNote(true);\n      } catch (error) {\n        setError(error.message);\n      }\n    };\n\n    if (note === null) {\n      fetchNote();\n    }\n\n \n  }, [user, note, bookID, noteID]);\n\n  return { note, hasFetchedNote, error };\n};\n\nexport default useFetchNote;\n","import React from \"react\";\nimport Layout from \"../components/Page/Layout\";\nimport { RedirectHome } from \"../components/Routing\";\nimport { convertFromRaw } from \"draft-js\";\nimport TextEditor from \"../components/Editor/TextEditor\";\nimport * as queryString from \"query-string\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport useFetchNote from \"../hooks/useFetchNote\";\n\nconst Note = ({ location }) => {\n  const { user } = useAuth0();\n  const bookID = queryString.parse(location.search).book;\n  const noteID = queryString.parse(location.search).note;\n  const { note, hasFetchedNote } = useFetchNote(user, bookID, noteID);\n\n  if (bookID === null) {\n    return <RedirectHome />;\n  } else {\n    return (\n      <Layout>\n        {hasFetchedNote && (\n          <TextEditor\n            username={user.email}\n            bookID={bookID}\n            noteID={noteID}\n            initialContent={convertFromRaw(JSON.parse(note.content))}\n            noteTitle={note.noteTitle}\n            existingNote={true}\n            editMode={false}\n          />\n        )}\n      </Layout>\n    );\n  }\n};\n\nexport default Note;\n"],"sourceRoot":""}